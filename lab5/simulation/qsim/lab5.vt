// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2023 20:10:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_vlg_sample_tst(
	Clk,
	d_in,
	reset,
	sampler_tx
);
input  Clk;
input  d_in;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or d_in or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab5_vlg_check_tst (
	leds1,
	leds2,
	state_neg,
	state_type,
	sampler_rx
);
input [1:7] leds1;
input [1:7] leds2;
input [1:7] state_neg;
input [1:7] state_type;
input sampler_rx;

reg [1:7] leds1_expected;
reg [1:7] leds2_expected;
reg [1:7] state_neg_expected;
reg [1:7] state_type_expected;

reg [1:7] leds1_prev;
reg [1:7] leds2_prev;
reg [1:7] state_neg_prev;
reg [1:7] state_type_prev;

reg [1:7] leds1_expected_prev;
reg [1:7] state_type_expected_prev;

reg [1:7] last_leds1_exp;
reg [1:7] last_state_type_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	leds1_prev = leds1;
	leds2_prev = leds2;
	state_neg_prev = state_neg;
	state_type_prev = state_type;
end

// update expected /o prevs

always @(trigger)
begin
	leds1_expected_prev = leds1_expected;
	state_type_expected_prev = state_type_expected;
end


// expected leds1[ 7 ]
initial
begin
	leds1_expected[7] = 1'bX;
end 
// expected leds1[ 6 ]
initial
begin
	leds1_expected[6] = 1'bX;
end 
// expected leds1[ 5 ]
initial
begin
	leds1_expected[5] = 1'bX;
end 
// expected leds1[ 4 ]
initial
begin
	leds1_expected[4] = 1'bX;
end 
// expected leds1[ 3 ]
initial
begin
	leds1_expected[3] = 1'bX;
end 
// expected leds1[ 2 ]
initial
begin
	leds1_expected[2] = 1'bX;
end 
// expected leds1[ 1 ]
initial
begin
	leds1_expected[1] = 1'bX;
end 
// expected state_type[ 7 ]
initial
begin
	state_type_expected[7] = 1'bX;
end 
// expected state_type[ 6 ]
initial
begin
	state_type_expected[6] = 1'bX;
end 
// expected state_type[ 5 ]
initial
begin
	state_type_expected[5] = 1'bX;
end 
// expected state_type[ 4 ]
initial
begin
	state_type_expected[4] = 1'bX;
end 
// expected state_type[ 3 ]
initial
begin
	state_type_expected[3] = 1'bX;
end 
// expected state_type[ 2 ]
initial
begin
	state_type_expected[2] = 1'bX;
end 
// expected state_type[ 1 ]
initial
begin
	state_type_expected[1] = 1'bX;
end 
// generate trigger
always @(leds1_expected or leds1 or leds2_expected or leds2 or state_neg_expected or state_neg or state_type_expected or state_type)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected leds1 = %b | expected leds2 = %b | expected state_neg = %b | expected state_type = %b | ",leds1_expected_prev,leds2_expected_prev,state_neg_expected_prev,state_type_expected_prev);
	$display("| real leds1 = %b | real leds2 = %b | real state_neg = %b | real state_type = %b | ",leds1_prev,leds2_prev,state_neg_prev,state_type_prev);
`endif
	if (
		( leds1_expected_prev[0] !== 1'bx ) && ( leds1_prev[0] !== leds1_expected_prev[0] )
		&& ((leds1_expected_prev[0] !== last_leds1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[0] = leds1_expected_prev[0];
	end
	if (
		( leds1_expected_prev[1] !== 1'bx ) && ( leds1_prev[1] !== leds1_expected_prev[1] )
		&& ((leds1_expected_prev[1] !== last_leds1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[1] = leds1_expected_prev[1];
	end
	if (
		( leds1_expected_prev[2] !== 1'bx ) && ( leds1_prev[2] !== leds1_expected_prev[2] )
		&& ((leds1_expected_prev[2] !== last_leds1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[2] = leds1_expected_prev[2];
	end
	if (
		( leds1_expected_prev[3] !== 1'bx ) && ( leds1_prev[3] !== leds1_expected_prev[3] )
		&& ((leds1_expected_prev[3] !== last_leds1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[3] = leds1_expected_prev[3];
	end
	if (
		( leds1_expected_prev[4] !== 1'bx ) && ( leds1_prev[4] !== leds1_expected_prev[4] )
		&& ((leds1_expected_prev[4] !== last_leds1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[4] = leds1_expected_prev[4];
	end
	if (
		( leds1_expected_prev[5] !== 1'bx ) && ( leds1_prev[5] !== leds1_expected_prev[5] )
		&& ((leds1_expected_prev[5] !== last_leds1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[5] = leds1_expected_prev[5];
	end
	if (
		( leds1_expected_prev[6] !== 1'bx ) && ( leds1_prev[6] !== leds1_expected_prev[6] )
		&& ((leds1_expected_prev[6] !== last_leds1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds1_expected_prev);
		$display ("     Real value = %b", leds1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds1_exp[6] = leds1_expected_prev[6];
	end
	if (
		( state_type_expected_prev[0] !== 1'bx ) && ( state_type_prev[0] !== state_type_expected_prev[0] )
		&& ((state_type_expected_prev[0] !== last_state_type_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[0] = state_type_expected_prev[0];
	end
	if (
		( state_type_expected_prev[1] !== 1'bx ) && ( state_type_prev[1] !== state_type_expected_prev[1] )
		&& ((state_type_expected_prev[1] !== last_state_type_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[1] = state_type_expected_prev[1];
	end
	if (
		( state_type_expected_prev[2] !== 1'bx ) && ( state_type_prev[2] !== state_type_expected_prev[2] )
		&& ((state_type_expected_prev[2] !== last_state_type_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[2] = state_type_expected_prev[2];
	end
	if (
		( state_type_expected_prev[3] !== 1'bx ) && ( state_type_prev[3] !== state_type_expected_prev[3] )
		&& ((state_type_expected_prev[3] !== last_state_type_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[3] = state_type_expected_prev[3];
	end
	if (
		( state_type_expected_prev[4] !== 1'bx ) && ( state_type_prev[4] !== state_type_expected_prev[4] )
		&& ((state_type_expected_prev[4] !== last_state_type_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[4] = state_type_expected_prev[4];
	end
	if (
		( state_type_expected_prev[5] !== 1'bx ) && ( state_type_prev[5] !== state_type_expected_prev[5] )
		&& ((state_type_expected_prev[5] !== last_state_type_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[5] = state_type_expected_prev[5];
	end
	if (
		( state_type_expected_prev[6] !== 1'bx ) && ( state_type_prev[6] !== state_type_expected_prev[6] )
		&& ((state_type_expected_prev[6] !== last_state_type_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_type[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_type_expected_prev);
		$display ("     Real value = %b", state_type_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_type_exp[6] = state_type_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#180000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg d_in;
reg reset;
// wires                                               
wire [1:7] leds1;
wire [1:7] leds2;
wire [1:7] state_neg;
wire [1:7] state_type;

wire sampler;                             

// assign statements (if any)                          
lab5 i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.d_in(d_in),
	.leds1(leds1),
	.leds2(leds2),
	.reset(reset),
	.state_neg(state_neg),
	.state_type(state_type)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #10000 1'b1;
	#10000;
end 

// d_in
initial
begin
	d_in = 1'b1;
	d_in = #160000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

lab5_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.d_in(d_in),
	.reset(reset),
	.sampler_tx(sampler)
);

lab5_vlg_check_tst tb_out(
	.leds1(leds1),
	.leds2(leds2),
	.state_neg(state_neg),
	.state_type(state_type),
	.sampler_rx(sampler)
);
endmodule

